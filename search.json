[{"path":"https://elipousson.github.io/filenamr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 Eli Pousson Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://elipousson.github.io/filenamr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Eli Pousson. Author, maintainer, copyright holder.","code":""},{"path":"https://elipousson.github.io/filenamr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Pousson E (2023). filenamr: Make Modify File Names Metadata. https://github.com/elipousson/filenamr, https://elipousson.github.io/filenamr/.","code":"@Manual{,   title = {filenamr: Make and Modify File Names and Metadata},   author = {Eli Pousson},   year = {2023},   note = {https://github.com/elipousson/filenamr, https://elipousson.github.io/filenamr/}, }"},{"path":"https://elipousson.github.io/filenamr/index.html","id":"filenamr","dir":"","previous_headings":"","what":"Make and Modify File Names and Metadata","title":"Make and Modify File Names and Metadata","text":"goal filenamr help creating modifying file names paths. also supports reading writing EXIF metadata. primarily useful development packages work file reading writing need utilities support goal.","code":""},{"path":"https://elipousson.github.io/filenamr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Make and Modify File Names and Metadata","text":"can install development version filenamr like :","code":"pak::pkg_install(\"elipousson/filenamr\")"},{"path":"https://elipousson.github.io/filenamr/index.html","id":"making-file-names","dir":"","previous_headings":"","what":"Making file names","title":"Make and Modify File Names and Metadata","text":"make_filename() function design creating structured file names based name optional label, prefix, postfix: can also pass filename extension path (setting create = TRUE create directory directory already exist): provide number part filename, can use increment parameter create filename number replaced larger number:","code":"library(filenamr)  make_filename(   name = \"Neighborhoods\",   label = \"Baltimore, MD\" ) #> [1] \"baltimore_md_neighborhoods\"  make_filename(   prefix = \"Plot\",   name = \"Neighborhoods\",   label = \"Baltimore, MD\" ) #> [1] \"plot_baltimore_md_neighborhoods\"  make_filename(   prefix = \"date\",   name = \"Neighborhoods\",   label = \"Baltimore, MD\",   postfix = \"map\",   fileext = \"jpeg\" ) #> [1] \"2023-03-24_baltimore_md_neighborhoods_map.jpeg\" make_filename(   filename = \"baltimore_neighborhoods\",   path = \"data\",   fileext = \"pdf\",   create = FALSE ) #> [1] \"data/baltimore_neighborhoods.pdf\" make_filename(   filename = \"plot\",   postfix = \"1\",   increment = TRUE,   fileext = \"png\" ) #> [1] \"plot_2.png\"  make_filename(   filename = \"plot\",   postfix = \"1\",   increment = 2,   fileext = \"png\" ) #> [1] \"plot_3.png\""},{"path":"https://elipousson.github.io/filenamr/index.html","id":"working-with-file-metdata","dir":"","previous_headings":"","what":"Working with file metdata","title":"Make and Modify File Names and Metadata","text":"package uses exiftoolr package (installing development version GitHub recommended) support reading writing EXIF, IPTC, XMP-DC metadata.","code":""},{"path":"https://elipousson.github.io/filenamr/reference/check_file_overwrite.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if a file exists and remove file or error — check_file_overwrite","title":"Check if a file exists and remove file or error — check_file_overwrite","text":"filename path must include single file extension.","code":""},{"path":"https://elipousson.github.io/filenamr/reference/check_file_overwrite.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if a file exists and remove file or error — check_file_overwrite","text":"","code":"check_file_overwrite(   filename = NULL,   path = NULL,   overwrite = TRUE,   quiet = FALSE,   ask = TRUE,   .envir = caller_env(),   call = caller_env() )"},{"path":"https://elipousson.github.io/filenamr/reference/check_file_overwrite.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if a file exists and remove file or error — check_file_overwrite","text":"filename File name, Default: NULL. Optional path supplied. path File path, Default: NULL. Optional filename supplied. overwrite TRUE, remove file name path quiet TRUE, suppress informational messages, Default: FALSE ask TRUE, overwrite FALSE, session interactive, ask user wants overwrite file. Default: TRUE call execution environment currently running function, e.g. caller_env(). function mentioned error messages source error. See call argument abort() information.","code":""},{"path":"https://elipousson.github.io/filenamr/reference/check_path_fileext.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if a file path has a file extension — check_path_fileext","title":"Check if a file path has a file extension — check_path_fileext","text":"check_path_fileext() checks character vector file paths file extension specified file extension. Errors elements pass condition.","code":""},{"path":"https://elipousson.github.io/filenamr/reference/check_path_fileext.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if a file path has a file extension — check_path_fileext","text":"","code":"check_path_fileext(   path,   fileext = NULL,   message = \"{.arg {arg}} must have a file extension.\",   arg = caller_arg(path),   call = caller_env() )"},{"path":"https://elipousson.github.io/filenamr/reference/check_path_fileext.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if a file path has a file extension — check_path_fileext","text":"path Character vector file path paths check. Required. fileext Optional file extension string. NULL, path must file extension. fileext character string, elements path must matching file extension. message formatted via call cli_bullets(). call execution environment currently running function, e.g. call = caller_env(). corresponding function call retrieved mentioned error messages source error. need supply call throwing condition helper function relevant mention message. Can also NULL defused function call respectively display call hard-code code display. information error calls, see Including function calls error messages.","code":""},{"path":"https://elipousson.github.io/filenamr/reference/default_exif_tags.html","id":null,"dir":"Reference","previous_headings":"","what":"Default EXIF, XMP-dc, and IPTC tags — default_exif_tags","title":"Default EXIF, XMP-dc, and IPTC tags — default_exif_tags","text":"vector default EXIF, XMP-dc, IPTC tags (including wildcard EXIF tag \"GPS\") used read_exif().","code":""},{"path":"https://elipousson.github.io/filenamr/reference/default_exif_tags.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default EXIF, XMP-dc, and IPTC tags — default_exif_tags","text":"","code":"default_exif_tags"},{"path":"https://elipousson.github.io/filenamr/reference/default_exif_tags.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Default EXIF, XMP-dc, and IPTC tags — default_exif_tags","text":"length 26 character vector.","code":""},{"path":"https://elipousson.github.io/filenamr/reference/default_exif_xwalk.html","id":null,"dir":"Reference","previous_headings":"","what":"EXIF data column name crosswalk — default_exif_xwalk","title":"EXIF data column name crosswalk — default_exif_xwalk","text":"named vector crosswalk default column names returned exiftoolr::exif_read() replacement values used new names.","code":""},{"path":"https://elipousson.github.io/filenamr/reference/default_exif_xwalk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"EXIF data column name crosswalk — default_exif_xwalk","text":"","code":"default_exif_xwalk"},{"path":"https://elipousson.github.io/filenamr/reference/default_exif_xwalk.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"EXIF data column name crosswalk — default_exif_xwalk","text":"length 29 named character vector.","code":""},{"path":"https://elipousson.github.io/filenamr/reference/filenamr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"filenamr: Make and Modify File Names and Metadata — filenamr-package","title":"filenamr: Make and Modify File Names and Metadata — filenamr-package","text":"Work filenames paths read write file metadata.","code":""},{"path":[]},{"path":"https://elipousson.github.io/filenamr/reference/filenamr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"filenamr: Make and Modify File Names and Metadata — filenamr-package","text":"Maintainer: Eli Pousson eli.pousson@gmail.com (ORCID) [copyright holder]","code":""},{"path":"https://elipousson.github.io/filenamr/reference/fmt_exif_direction.html","id":null,"dir":"Reference","previous_headings":"","what":"Format a data.frame column as a cardinal direction in degrees and wind direction — fmt_exif_direction","title":"Format a data.frame column as a cardinal direction in degrees and wind direction — fmt_exif_direction","text":"Format data.frame column cardinal direction degrees wind direction","code":""},{"path":"https://elipousson.github.io/filenamr/reference/fmt_exif_direction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format a data.frame column as a cardinal direction in degrees and wind direction — fmt_exif_direction","text":"","code":"fmt_exif_direction(   data,   winds = 8,   .after = \"img_direction\",   call = caller_env() )"},{"path":"https://elipousson.github.io/filenamr/reference/fmt_exif_direction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format a data.frame column as a cardinal direction in degrees and wind direction — fmt_exif_direction","text":"data data.frame character vector format isstatic::as_cardinal_bearing(). data data.frame, photo direction assumed column named \"img_direction\" new cardinal bearing added column named \"img_cardinal_wind\". winds Number winds use results (4, 8, 16). .Column name passed .parameter dplyr::mutate(). call execution environment currently running function, e.g. caller_env(). function mentioned error messages source error. See call argument abort() information.","code":""},{"path":[]},{"path":"https://elipousson.github.io/filenamr/reference/get_data_dir.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if data directory exists and create a new directory if needed — get_data_dir","title":"Check if data directory exists and create a new directory if needed — get_data_dir","text":"Get path package-specific cache directory rappdirs::user_cache_dir(), check existence data directory, optionally create new directory provided path location.","code":""},{"path":"https://elipousson.github.io/filenamr/reference/get_data_dir.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if data directory exists and create a new directory if needed — get_data_dir","text":"","code":"get_data_dir(   path = NULL,   cache = FALSE,   create = TRUE,   ask = TRUE,   appname = NULL,   pkg = NULL,   allow_null = TRUE,   quiet = FALSE,   call = caller_env() )  list_path_filenames(   path,   fileext = NULL,   pattern = NULL,   full.names = TRUE,   call = caller_env(),   ... )"},{"path":"https://elipousson.github.io/filenamr/reference/get_data_dir.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if data directory exists and create a new directory if needed — get_data_dir","text":"path Path directory use data directory. cache TRUE, path NULL set path rappdirs::user_cache_dir() (using value pkg appname). path NULL, path returned even cache TRUE. create FALSE path exist, return path warning. TRUE rlang::is_interactive() TRUE, ask user directory created. session interactive create TRUE, new directory created. ask TRUE, create FALSE, session interactive, ask create directory provided directory exist. appname, pkg pkg used appname NULL. Passed rappdirs::user_cache_dir() allow_null TRUE, path NULL, cache FALSE, return NULL path value; defaults TRUE. quiet TRUE, suppress informational messages. call execution environment currently running function, e.g. caller_env(). function mentioned error messages source error. See call argument abort() information. fileext File extension. supplied list_path_filenames() pattern NULL, return file names matching extension. pattern optional regular expression.  file names     match regular expression returned. full.names logical value.  TRUE, directory     path prepended file names give relative file path.     FALSE, file names (rather paths) returned. ... Additional parameters passed list.files() list_path_filenames().","code":""},{"path":"https://elipousson.github.io/filenamr/reference/get_path_fileext.html","id":null,"dir":"Reference","previous_headings":"","what":"Get file extensions for files at a path — get_path_fileext","title":"Get file extensions for files at a path — get_path_fileext","text":"fileext provided, get_path_fileext() pass file extension forward without checking . list_path_fileext() basic function list file extensions path directory.","code":""},{"path":"https://elipousson.github.io/filenamr/reference/get_path_fileext.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get file extensions for files at a path — get_path_fileext","text":"","code":"get_path_fileext(   path,   fileext = NULL,   n = 1,   quiet = FALSE,   call = caller_env() )  list_path_fileext(path, allow_null = FALSE, call = caller_env(), ...)"},{"path":"https://elipousson.github.io/filenamr/reference/get_path_fileext.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get file extensions for files at a path — get_path_fileext","text":"path single directory file path. directory file must exist. fileext fileext supplied, function returns file extension . NULL (default), one file extensions extracted files path location. n Max number unique file types return. Returns warning n common file types path n unique file types. quiet TRUE, suppress informational messages. call execution environment currently running function, e.g. caller_env(). function mentioned error messages source error. See call argument abort() information. allow_null TRUE, list_path_fileext() returns NULL path NULL files exist path location. FALSE (default), abort either condition met. ... Additional parameters passed list_path_fileext() list.files().","code":""},{"path":"https://elipousson.github.io/filenamr/reference/list_pkg_data.html","id":null,"dir":"Reference","previous_headings":"","what":"List package datasets, extdata files, and files in package cache — list_pkg_data","title":"List package datasets, extdata files, and files in package cache — list_pkg_data","text":"list_pkg_data() calls three helper functions returns data.frame. list_pkg_datasets() lists package datasets (using library path path), list_pkg_extdata() lists extdata files package (using basename without file extension item name), list_pkg_cachedata() lists data package cache folder returned rappdirs::user_cache_dir().","code":""},{"path":"https://elipousson.github.io/filenamr/reference/list_pkg_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List package datasets, extdata files, and files in package cache — list_pkg_data","text":"","code":"list_pkg_data(   pkg = NULL,   version = NULL,   dir = \"extdata\",   lib.loc = NULL,   call = caller_env() )  list_pkg_datasets(pkg, lib.loc = NULL)  list_pkg_extdata(pkg, dir = \"extdata\", full.names = TRUE, recursive = TRUE)  list_pkg_cachedata(pkg, full.names = TRUE, recursive = TRUE)"},{"path":"https://elipousson.github.io/filenamr/reference/list_pkg_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List package datasets, extdata files, and files in package cache — list_pkg_data","text":"pkg package names. Can include version requirements, e.g. \"pkg (>= 1.0.0)\". version Minimum versions pkg. supplied, must length pkg. NA elements stand versions. dir One directory names pass first argument system.file(). Defaults \"extdir\". lib.loc character vector path names R libraries.     See ‘Details’ meaning default value NULL. call execution environment currently running function, e.g. caller_env(). function mentioned error messages source error. See call argument abort() information. full.names logical value.  TRUE, directory     path prepended file names give relative file path.     FALSE, file names (rather paths) returned. recursive logical.  listing recurse directories?","code":""},{"path":"https://elipousson.github.io/filenamr/reference/make_filename.html","id":null,"dir":"Reference","previous_headings":"","what":"Make file name and path with optional label, prefix, or postfix — make_filename","title":"Make file name and path with optional label, prefix, or postfix — make_filename","text":"helper function create consistent file names plots created data files.","code":""},{"path":"https://elipousson.github.io/filenamr/reference/make_filename.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make file name and path with optional label, prefix, or postfix — make_filename","text":"","code":"make_filename(   name = NULL,   label = NULL,   fileext = NULL,   filename = NULL,   path = NULL,   prefix = NULL,   postfix = NULL,   pad = NULL,   width = NULL,   cache = FALSE,   appname = NULL,   pkg = NULL,   create = TRUE,   increment = NULL,   call = caller_env() )"},{"path":"https://elipousson.github.io/filenamr/reference/make_filename.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make file name and path with optional label, prefix, or postfix — make_filename","text":"name Name make file name converted snake case janitor::make_clean_names(), e.g. \"Residential zoning map\" becomes \"residential_zoning_map\". name includes file extension assumed filename provided name parameter. label Label combine name converted snake case janitor::make_clean_names(). label designed identify area shared characteristics across multiple data files, maps, plots. label ignored name NULL name includes file extension. fileext File type extension. Optional filename path include file extension. filename File name; filename NULL path include file extension, name file extension required. path Path file data directory. Optional. path includes file extension filename fileext NULL, filename extension included path used instead. multiple file extensions provided filename, path, fileext, make_filename() abort. prefix File name prefix. \"date\" adds date prefix, \"time\" adds date/time prefix; defaults NULL. postfix File name postfix; defaults NULL. pad Single padding character added digits string; defaults \"0\" width Minimum width padded strings. cache TRUE, path set package cache directory using get_data_dir(); defaults FALSE. appname, pkg pkg used appname NULL. Passed rappdirs::user_cache_dir() create FALSE path exist, return path warning. TRUE rlang::is_interactive() TRUE, ask user directory created. session interactive create TRUE, new directory created. increment TRUE, increment digits string 1. numeric, increment digits string value. NULL, 0, digits present string, return string . call execution environment currently running function, e.g. caller_env(). function mentioned error messages source error. See call argument abort() information.","code":""},{"path":"https://elipousson.github.io/filenamr/reference/make_filename.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make file name and path with optional label, prefix, or postfix — make_filename","text":"","code":"make_filename(   filename = \"image.jpeg\" ) #> [1] \"image.jpeg\"  make_filename(   name = \"plot\",   label = \"Group a\",   fileext = \"png\" ) #> [1] \"group_a_plot.png\"  make_filename(   name = \"plot\",   prefix = \"date\",   fileext = \"png\" ) #> [1] \"2023-09-18_plot.png\"  make_filename(   name = \"map_1\",   increment = TRUE,   fileext = \"geojson\" ) #> [1] \"map_2.geojson\""},{"path":"https://elipousson.github.io/filenamr/reference/read_exif.html","id":null,"dir":"Reference","previous_headings":"","what":"Read EXIF metadata to create a simple feature object or write\nEXIF metadata to image files — read_exif","title":"Read EXIF metadata to create a simple feature object or write\nEXIF metadata to image files — read_exif","text":"read_exif() read EXIF data folder files. Optionally assigns cardinal direction based direction metadata recodes orientation metadata. Note tags must include GPS tags plan create sf object based resulting data.frame object. write_exif() parameters used multiple tags values: title: Title, IPTC:Headline, IPTC:ObjectName, XMP-dc:Title description: ImageDescription, XMP-dc:Description, IPTC:Caption-Abstract keywords: Keywords, IPTC:Keywords, XMP-dc:Subject","code":""},{"path":"https://elipousson.github.io/filenamr/reference/read_exif.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read EXIF metadata to create a simple feature object or write\nEXIF metadata to image files — read_exif","text":"","code":"read_exif(   path = NULL,   fileext = NULL,   tags = NULL,   format_exif = TRUE,   xwalk = NULL,   tz = NULL,   .name_repair = \"check_unique\",   ... )  write_exif(   path,   fileext = NULL,   title = NULL,   author = NULL,   credit = author,   date = NULL,   keywords = NULL,   description = NULL,   alt = NULL,   metadata = NULL,   args = NULL,   overwrite = TRUE,   append_keywords = FALSE,   quiet = FALSE,   call = caller_env() )"},{"path":"https://elipousson.github.io/filenamr/reference/read_exif.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read EXIF metadata to create a simple feature object or write\nEXIF metadata to image files — read_exif","text":"path path folder file. fileext file extension file type; defaults NULL. tags List EXIF tags read files. NULL (default), set option \"filenamr.exif_tags\" default default_exif_tags. format_exif TRUE (default), rename columns based xwalk values, add cardinal directions based bearing, format date columns. xwalk NULL, set option \"filenamr.exif_xwalk\" default default_exif_xwalk. tz Time zone pass lubridate::ymd_hms() format_exif TRUE. Typically set Sys.timezone() convert date/time columns. .name_repair Treatment problematic column names: \"minimal\": name repair checks, beyond basic existence, \"unique\": Make sure names unique empty, \"check_unique\": (default value), name repair, check unique, \"universal\": Make names unique syntactic function: apply custom name repair (e.g., .name_repair = make.names names style base R). purrr-style anonymous function, see rlang::as_function() argument passed repair vctrs::vec_as_names(). See details terms strategies used enforce . ... Additional parameters pass exiftoolr::exif_read() title Title add file metadata exiftoolr, Default: NULL. author Author add file metadata \"Author\" \"XMP-dc:creator\" tags. Default: NULL. credit Credit add file metadata \"IPTC:Credit\" \"XMP-dc:Credit\" tags. Defaults value author. date Date add file metadata exiftoolr (currently working).  Defaults NULL. keywords Keyword(s) added file metadata \"IPTC:Keywords\" \"XMP-dc:Subject\" tags. Defaults NULL. description Description added \"ImageDescription\", \"IPTC:Caption-Abstract\", \"XMP-dc:Description\" tags. alt Text pass alt text \"IPTC:AltTextAccessibility\" \"iTXt\" (PNG files ) tags. Defaults NULL. metadata metadata parameters (title, author, credit, date, keywords, description, alt) can also set passing named list data.frame metadata. argument supplied, conflicting value metadata ignored. args Alternate arguments passed exiftoolr::exif_call(). tag parameters appended args NULL. overwrite TRUE, overwrite existing EXIF metadata present provided fields; defaults TRUE append_keywords TRUE, append keywords, FALSE, replace keywords file metadata. quiet TRUE (default), suppress function messages. call execution environment currently running function, e.g. caller_env(). function mentioned error messages source error. See call argument abort() information.","code":""},{"path":"https://elipousson.github.io/filenamr/reference/read_exif.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read EXIF metadata to create a simple feature object or write\nEXIF metadata to image files — read_exif","text":"tibble EXIF metadata files located path directory.","code":""},{"path":"https://elipousson.github.io/filenamr/reference/set_file_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Set a file path and validate path file extension — set_file_path","title":"Set a file path and validate path file extension — set_file_path","text":"flexible wrapper isstatic::file_path() allows provide file path filename path parameter. path contains file extension fileext parameter provided, function aborts two file extensions match.","code":""},{"path":"https://elipousson.github.io/filenamr/reference/set_file_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set a file path and validate path file extension — set_file_path","text":"","code":"set_file_path(   filename = NULL,   path = NULL,   fileext = NULL,   allow_null = FALSE,   call = caller_env() )"},{"path":"https://elipousson.github.io/filenamr/reference/set_file_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set a file path and validate path file extension — set_file_path","text":"filename File name. Optional path supplied. path File path. Optional filename supplied. fileext File extension. path supplied using filename path end file extension, fileext used file extension returned path. path, end file extension, fileext used validate supplied. allow_null TRUE, return NULL filename path NULL. FALSE, error filename path NULL. call execution environment currently running function, e.g. caller_env(). function mentioned error messages source error. See call argument abort() information.","code":""},{"path":"https://elipousson.github.io/filenamr/reference/str_affix.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply a prefix or postfix to a string — str_affix","title":"Apply a prefix or postfix to a string — str_affix","text":"Prefix postfix can include one value added order provided. str_affix(), string must single character string.","code":""},{"path":"https://elipousson.github.io/filenamr/reference/str_affix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply a prefix or postfix to a string — str_affix","text":"","code":"str_affix(   string = NULL,   prefix = NULL,   postfix = NULL,   sep = \"_\",   pad = NULL,   width = NULL,   use_clean_names = TRUE,   case = \"snake\",   replace = c(`'` = \"\", `\"` = \"\", `%` = \"_pct_\", `#` = \"_num_\"),   use_make_names = TRUE,   call = caller_env(),   ... )  str_prefix(   string = NULL,   prefix = NULL,   sep = \"_\",   is_postfix = FALSE,   date.format = \"%Y-%m-%d\",   time.format = \"%Y-%m-%d_%I-%M-%S_%p\",   use_clean_names = TRUE,   case = \"snake\",   replace = c(`'` = \"\", `\"` = \"\", `%` = \"_pct_\", `#` = \"_num_\"),   use_make_names = TRUE,   ... )"},{"path":"https://elipousson.github.io/filenamr/reference/str_affix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply a prefix or postfix to a string — str_affix","text":"string single string attach prefix postfix added . prefix Character string character vector add string parameter prefix. postfix Character string character vector add string parameter postfix. sep Separator character passed collapse parameter paste(). pad Single padding character added digits string; defaults \"0\" width Minimum width padded strings. use_clean_names TRUE, prefix, postfix, string converted snake case janitor::make_clean_names(). case desired target case (default \"snake\") passed snakecase::to_any_case() exception \"old_janitor\", exists support legacy code (preserves behavior clean_names() prior addition \"case\" argument (janitor versions <= 0.3.1).  \"old_janitor\" intended new code. See to_any_case wide variety supported cases, including \"sentence\" \"title\" case. replace named character vector name replaced value. use_make_names make.names() applied ensure output usable name without quoting?  (Avoiding make.names() ensures output locale-independent quoting may required.) call execution environment currently running function, e.g. caller_env(). function mentioned error messages source error. See call argument abort() information. ... Additional parameters passed janitor::make_clean_names() use_clean_names TRUE. is_postfix TRUE, use prefix string postfix; defaults FALSE. date.format, time.format Date time format. used str_prefix prefix \"date\" \"time\" currently accessible using str_affix() make_filename().","code":""},{"path":"https://elipousson.github.io/filenamr/reference/str_affix.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Apply a prefix or postfix to a string — str_affix","text":"str_affix(): Add label, prefix, postfix string str_prefix(): Add prefix postfix string","code":""},{"path":[]},{"path":"https://elipousson.github.io/filenamr/news/index.html","id":"features-0-1-0-9002","dir":"Changelog","previous_headings":"","what":"Features","title":"filenamr 0.1.0.9002 (2023-04-06)","text":"Add creator alt parameters read_exif(). Update handling args values ignored NULL. Export list_path_filenames() list_path_fileext(). Add list_pkg_data() function.","code":""},{"path":"https://elipousson.github.io/filenamr/news/index.html","id":"refactoring-0-1-0-9002","dir":"Changelog","previous_headings":"","what":"Refactoring","title":"filenamr 0.1.0.9002 (2023-04-06)","text":"Move rappdirs Suggests Imports. Drop sf package Suggests (remove geometry parameter read_exif()) Pass call parameter consistent error-handling functions.","code":""},{"path":"https://elipousson.github.io/filenamr/news/index.html","id":"testing-0-1-0-9002","dir":"Changelog","previous_headings":"","what":"Testing","title":"filenamr 0.1.0.9002 (2023-04-06)","text":"Rework read_exif() test use exiftoolr sample images.","code":""},{"path":"https://elipousson.github.io/filenamr/news/index.html","id":"filenamr-0109001-2023-03-20","dir":"Changelog","previous_headings":"","what":"filenamr 0.1.0.9001 (2023-03-20)","title":"filenamr 0.1.0.9001 (2023-03-20)","text":"Export check_path_fileext() function. Remove str_fileext functions (moved {isstatic} package)","code":""},{"path":"https://elipousson.github.io/filenamr/news/index.html","id":"filenamr-0109000-2023-03-15","dir":"Changelog","previous_headings":"","what":"filenamr 0.1.0.9000 (2023-03-15)","title":"filenamr 0.1.0.9000 (2023-03-15)","text":"Initial release.","code":""}]
