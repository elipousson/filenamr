[{"path":"https://elipousson.github.io/filenamr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 Eli Pousson Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://elipousson.github.io/filenamr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Eli Pousson. Author, maintainer, copyright holder.","code":""},{"path":"https://elipousson.github.io/filenamr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Pousson E (2023). filenamr: Make Modify File Names Metadata. https://github.com/elipousson/filenamr, https://elipousson.github.io/filenamr/.","code":"@Manual{,   title = {filenamr: Make and Modify File Names and Metadata},   author = {Eli Pousson},   year = {2023},   note = {https://github.com/elipousson/filenamr, https://elipousson.github.io/filenamr/}, }"},{"path":"https://elipousson.github.io/filenamr/index.html","id":"filenamr","dir":"","previous_headings":"","what":"Make and Modify File Names and Metadata","title":"Make and Modify File Names and Metadata","text":"goal filenamr help creating modifying file names paths. also supports reading writing EXIF metadata. primarily useful development packages work file reading writing need utilities support goal.","code":""},{"path":"https://elipousson.github.io/filenamr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Make and Modify File Names and Metadata","text":"can install development version filenamr like :","code":"pak::pkg_install(\"elipousson/sfext\")"},{"path":"https://elipousson.github.io/filenamr/index.html","id":"making-file-names","dir":"","previous_headings":"","what":"Making file names","title":"Make and Modify File Names and Metadata","text":"make_filename() function design creating structured file names based name optional label, prefix, postfix: can also pass filename extension path (setting create = TRUE create directory directory already exist): provide number part filename, can use increment parameter create filename number replaced larger number:","code":"library(filenamr)  make_filename(   name = \"Neighborhoods\",   label = \"Baltimore, MD\" ) #> [1] \"baltimore_md_neighborhoods\"  make_filename(   prefix = \"Plot\",   name = \"Neighborhoods\",   label = \"Baltimore, MD\" ) #> [1] \"plot_baltimore_md_neighborhoods\"  make_filename(   prefix = \"date\",   name = \"Neighborhoods\",   label = \"Baltimore, MD\",   postfix = \"map\",   fileext = \"jpeg\" ) #> [1] \"2023-03-15_baltimore_md_neighborhoods_map.jpeg\" make_filename(   filename = \"baltimore_neighborhoods\",   path = \"data\",   fileext = \"pdf\",   create = FALSE ) #> [1] \"data/baltimore_neighborhoods.pdf\" make_filename(   filename = \"plot\",   postfix = \"1\",   increment = TRUE,   fileext = \"png\" ) #> [1] \"plot_2.png\"  make_filename(   filename = \"plot\",   postfix = \"1\",   increment = 2,   fileext = \"png\" ) #> [1] \"plot_3.png\""},{"path":"https://elipousson.github.io/filenamr/index.html","id":"working-with-file-metdata","dir":"","previous_headings":"","what":"Working with file metdata","title":"Make and Modify File Names and Metadata","text":"package uses exiftoolr package (installing development version GitHub recommended) support reading writing EXIF, IPTC, XMP-DC metadata.","code":""},{"path":"https://elipousson.github.io/filenamr/reference/check_file_overwrite.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if a file exists and remove file or error — check_file_overwrite","title":"Check if a file exists and remove file or error — check_file_overwrite","text":"filename path must include single file extension.","code":""},{"path":"https://elipousson.github.io/filenamr/reference/check_file_overwrite.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if a file exists and remove file or error — check_file_overwrite","text":"","code":"check_file_overwrite(   filename = NULL,   path = NULL,   overwrite = TRUE,   quiet = FALSE,   ask = TRUE,   call = caller_env() )"},{"path":"https://elipousson.github.io/filenamr/reference/check_file_overwrite.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if a file exists and remove file or error — check_file_overwrite","text":"filename File name, Default: NULL. Optional path supplied. path File path, Default: NULL. Optional filename supplied. overwrite TRUE, remove file name path quiet TRUE, suppress informational messages, Default: FALSE ask TRUE, overwrite FALSE, session interactive, ask user wants overwrite file. Default: TRUE call Passed cli_abort(), Default: caller_env()","code":""},{"path":"https://elipousson.github.io/filenamr/reference/check_path_fileext.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if a file path has a file extension — check_path_fileext","title":"Check if a file path has a file extension — check_path_fileext","text":"Check file path file extension","code":""},{"path":"https://elipousson.github.io/filenamr/reference/check_path_fileext.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if a file path has a file extension — check_path_fileext","text":"","code":"check_path_fileext(   path,   fileext = NULL,   message = \"{.arg path} must include a file extension.\",   call = parent.frame() )"},{"path":"https://elipousson.github.io/filenamr/reference/check_path_fileext.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if a file path has a file extension — check_path_fileext","text":"path File path check. Required. fileext Optional file extension. NULL, path must file extension. character string, path must matching file extension. message formatted via call cli_bullets(). call execution environment currently running function, e.g. call = caller_env(). corresponding function call retrieved mentioned error messages source error. need supply call throwing condition helper function relevant mention message. Can also NULL defused function call respectively display call hard-code code display. information error calls, see Including function calls error messages.","code":""},{"path":"https://elipousson.github.io/filenamr/reference/default_tags.html","id":null,"dir":"Reference","previous_headings":"","what":"Default EXIF, XMP-dc, and IPTC tags — default_tags","title":"Default EXIF, XMP-dc, and IPTC tags — default_tags","text":"vector default EXIF, XMP-dc, IPTC tags (including wildcard EXIF tag \"GPS\") used read_exif().","code":""},{"path":"https://elipousson.github.io/filenamr/reference/default_tags.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default EXIF, XMP-dc, and IPTC tags — default_tags","text":"","code":"default_tags"},{"path":"https://elipousson.github.io/filenamr/reference/default_tags.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Default EXIF, XMP-dc, and IPTC tags — default_tags","text":"length 24 character vector.","code":""},{"path":"https://elipousson.github.io/filenamr/reference/filenamr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"filenamr: Make and Modify File Names and Metadata — filenamr-package","title":"filenamr: Make and Modify File Names and Metadata — filenamr-package","text":"Work filenames paths read write file metadata.","code":""},{"path":[]},{"path":"https://elipousson.github.io/filenamr/reference/filenamr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"filenamr: Make and Modify File Names and Metadata — filenamr-package","text":"Maintainer: Eli Pousson eli.pousson@gmail.com (ORCID) [copyright holder]","code":""},{"path":"https://elipousson.github.io/filenamr/reference/fmt_exif_direction.html","id":null,"dir":"Reference","previous_headings":"","what":"Format a data.frame column as a cardinal direction in degrees and wind direction — fmt_exif_direction","title":"Format a data.frame column as a cardinal direction in degrees and wind direction — fmt_exif_direction","text":"Format data.frame column cardinal direction degrees wind direction","code":""},{"path":"https://elipousson.github.io/filenamr/reference/fmt_exif_direction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format a data.frame column as a cardinal direction in degrees and wind direction — fmt_exif_direction","text":"","code":"fmt_exif_direction(data, winds = 8, .after = \"img_direction\")"},{"path":"https://elipousson.github.io/filenamr/reference/fmt_exif_direction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format a data.frame column as a cardinal direction in degrees and wind direction — fmt_exif_direction","text":"data data.frame character vector format isstatic::as_cardinal_bearing(). data data.frame, photo direction assumed column named \"img_direction\" new cardinal bearing added column named \"img_cardinal_wind\". winds Number winds use results (4, 8, 16). .Column name passed .parameter dplyr::mutate().","code":""},{"path":"https://elipousson.github.io/filenamr/reference/get_data_dir.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if data directory exists and create a new directory if needed — get_data_dir","title":"Check if data directory exists and create a new directory if needed — get_data_dir","text":"Get path package-specific cache directory rappdirs::user_cache_dir(), check existence data directory, optionally create new directory provided path location.","code":""},{"path":"https://elipousson.github.io/filenamr/reference/get_data_dir.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if data directory exists and create a new directory if needed — get_data_dir","text":"","code":"get_data_dir(   path = NULL,   cache = FALSE,   create = TRUE,   ask = TRUE,   appname = NULL,   allow_null = TRUE,   quiet = FALSE )"},{"path":"https://elipousson.github.io/filenamr/reference/get_data_dir.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if data directory exists and create a new directory if needed — get_data_dir","text":"path Path directory use data directory. cache TRUE, path NULL set path rappdirs::user_cache_dir() (using value pkg appname). path NULL, path returned even cache TRUE. create FALSE path exist, return path warning. TRUE rlang::is_interactive() TRUE, ask user directory created. session interactive create TRUE, new directory created. ask TRUE, create FALSE, session interactive, ask create directory provided directory exist. appname Passed rappdirs::user_cache_dir() allow_null TRUE, path NULL, cache FALSE, return NULL path value; defaults TRUE. quiet TRUE, suppress informational messages.","code":""},{"path":"https://elipousson.github.io/filenamr/reference/get_path_fileext.html","id":null,"dir":"Reference","previous_headings":"","what":"Get file types or extensions for files at a path — get_path_fileext","title":"Get file types or extensions for files at a path — get_path_fileext","text":"fileext provided, get_path_fileext() pass file extension forward without checking .","code":""},{"path":"https://elipousson.github.io/filenamr/reference/get_path_fileext.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get file types or extensions for files at a path — get_path_fileext","text":"","code":"get_path_fileext(   path,   fileext = NULL,   n = 1,   quiet = FALSE,   call = caller_env() )"},{"path":"https://elipousson.github.io/filenamr/reference/get_path_fileext.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get file types or extensions for files at a path — get_path_fileext","text":"path single directory file path. directory file must exist. fileext NULL, function returns file type . n Max number unique file types return. Returns warning n common file types path n unique file types. quiet TRUE, suppress informational messages.","code":""},{"path":"https://elipousson.github.io/filenamr/reference/make_filename.html","id":null,"dir":"Reference","previous_headings":"","what":"Make file name and path with optional label, prefix, or postfix — make_filename","title":"Make file name and path with optional label, prefix, or postfix — make_filename","text":"helper function create consistent file names plots created data files.","code":""},{"path":"https://elipousson.github.io/filenamr/reference/make_filename.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make file name and path with optional label, prefix, or postfix — make_filename","text":"","code":"make_filename(   name = NULL,   label = NULL,   fileext = NULL,   filename = NULL,   path = NULL,   prefix = NULL,   postfix = NULL,   pad = NULL,   width = NULL,   cache = FALSE,   appname = NULL,   create = TRUE,   increment = NULL )"},{"path":"https://elipousson.github.io/filenamr/reference/make_filename.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make file name and path with optional label, prefix, or postfix — make_filename","text":"name Name make file name converted snake case janitor::make_clean_names(), e.g. \"Residential zoning map\" becomes \"residential_zoning_map\". name includes file extension assumed filename provided name parameter. label Label combine name converted snake case janitor::make_clean_names(). label designed identify area shared characteristics across multiple data files, maps, plots. label ignored name NULL name includes file extension. fileext File type extension. Optional filename path include file extension. filename File name; filename NULL path include file extension, name file extension required. path Path file data directory. Optional. path includes file extension filename fileext NULL, filename extension included path used instead. multiple file extensions provided filename, path, fileext, make_filename() abort. prefix File name prefix. \"date\" adds date prefix, \"time\" adds date/time prefix; defaults NULL. postfix File name postfix; defaults NULL. pad Single padding character added digits string; defaults \"0\" width Minimum width padded strings. cache TRUE, path set package cache directory using get_data_dir(); defaults FALSE. appname Passed rappdirs::user_cache_dir() create FALSE path exist, return path warning. TRUE rlang::is_interactive() TRUE, ask user directory created. session interactive create TRUE, new directory created. increment TRUE, increment digits string 1. numeric, increment digits string value. NULL, 0, digits present string, return string . allow_no_fileext FALSE, error file extension supplied filename, path, fileext parameter. Defaults TRUE.","code":""},{"path":"https://elipousson.github.io/filenamr/reference/make_filename.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make file name and path with optional label, prefix, or postfix — make_filename","text":"","code":"make_filename(   filename = \"image.jpeg\" ) #> [1] \"image.jpeg\"  make_filename(   name = \"plot\",   label = \"Group a\",   fileext = \"png\" ) #> [1] \"group_a_plot.png\"  make_filename(   name = \"plot\",   prefix = \"date\",   fileext = \"png\" ) #> [1] \"2023-03-20_plot.png\"  make_filename(   name = \"map_1\",   increment = TRUE,   fileext = \"geojson\" ) #> [1] \"map_2.geojson\""},{"path":"https://elipousson.github.io/filenamr/reference/read_exif.html","id":null,"dir":"Reference","previous_headings":"","what":"Read EXIF metadata to create a simple feature object or write\nEXIF metadata to image files — read_exif","title":"Read EXIF metadata to create a simple feature object or write\nEXIF metadata to image files — read_exif","text":"read_exif() read EXIF data folder files. function also assigns cardinal direction based direction metadata recodes orientation metadata. write_exif() parameters used multiple tags values: title: Title, IPTC:Headline, IPTC:ObjectName, XMP-dc:Title description: ImageDescription, XMP-dc:Description, IPTC:Caption-Abstract keywords: Keywords, IPTC:Keywords, XMP-dc:Subject","code":""},{"path":"https://elipousson.github.io/filenamr/reference/read_exif.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read EXIF metadata to create a simple feature object or write\nEXIF metadata to image files — read_exif","text":"","code":"read_exif(   path = NULL,   fileext = NULL,   bbox = NULL,   tags = getOption(\"read_exif.tags\", default = default_tags),   geometry = FALSE,   ... )  write_exif(   path,   fileext = NULL,   title = NULL,   author = NULL,   date = NULL,   keywords = NULL,   description = NULL,   args = NULL,   overwrite = TRUE,   append_keywords = FALSE )"},{"path":"https://elipousson.github.io/filenamr/reference/read_exif.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read EXIF metadata to create a simple feature object or write\nEXIF metadata to image files — read_exif","text":"path path folder file. fileext file extension file type; defaults NULL. bbox Optional bounding box crop returned file (excluding images location data outside bounding box). bbox provided returned data match crs bbox. tags Optional list EXIF tags read files. Must include GPS tags create sf object. geometry TRUE, convert data.frame coordinates sf object using sf::st_as_sf(). ... Additional EXIF tags pass exiftoolr::exif_read() title Title add file metadata exiftoolr, Default: NULL. author Author add file metadata exiftoolr, Default: NULL. date Date add file metadata exiftoolr (currently working), Default: NULL. keywords Keyword(s) added file metadata exiftoolr, Default: NULL. description Description added file metadata. args Alternate arguments passed exiftoolr::exif_call(). args NULL, title, author, date, keywords ignored; defaults NULL. overwrite TRUE, overwrite existing EXIF metadata present provided fields; defaults TRUE append_keywords TRUE, append keywords, FALSE, replace keywords file metadata.","code":""},{"path":"https://elipousson.github.io/filenamr/reference/set_file_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Set a file path and validate path file extension — set_file_path","title":"Set a file path and validate path file extension — set_file_path","text":"flexible wrapper isstatic::file_path() allows provide file path filename path parameter. path contains file extension fileext parameter provided, function aborts two file extensions match.","code":""},{"path":"https://elipousson.github.io/filenamr/reference/set_file_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set a file path and validate path file extension — set_file_path","text":"","code":"set_file_path(   filename = NULL,   path = NULL,   fileext = NULL,   allow_null = FALSE,   call = parent.frame() )"},{"path":"https://elipousson.github.io/filenamr/reference/set_file_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set a file path and validate path file extension — set_file_path","text":"filename File name. Optional path supplied. path File path. Optional filename supplied. fileext File extension. path supplied using filename path end file extension, fileext used file extension returned path. path, end file extension, fileext used validate supplied. allow_null TRUE, return NULL filename path NULL. FALSE, error filename path NULL.","code":""},{"path":"https://elipousson.github.io/filenamr/reference/str_affix.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply a prefix or postfix to a string — str_affix","title":"Apply a prefix or postfix to a string — str_affix","text":"Prefix postfix can include one value added order provided. str_affix(), string must single character string.","code":""},{"path":"https://elipousson.github.io/filenamr/reference/str_affix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply a prefix or postfix to a string — str_affix","text":"","code":"str_affix(   string = NULL,   prefix = NULL,   postfix = NULL,   sep = \"_\",   pad = NULL,   width = NULL,   use_clean_names = TRUE,   case = \"snake\",   replace = c(`'` = \"\", `\"` = \"\", `%` = \"_pct_\", `#` = \"_num_\"),   use_make_names = TRUE,   ... )  str_prefix(   string = NULL,   prefix = NULL,   sep = \"_\",   is_postfix = FALSE,   date.format = \"%Y-%m-%d\",   time.format = \"%Y-%m-%d_%I-%M-%S_%p\",   use_clean_names = TRUE,   case = \"snake\",   replace = c(`'` = \"\", `\"` = \"\", `%` = \"_pct_\", `#` = \"_num_\"),   use_make_names = TRUE,   ... )"},{"path":"https://elipousson.github.io/filenamr/reference/str_affix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply a prefix or postfix to a string — str_affix","text":"string single string attach prefix postfix added . prefix Character string character vector add string parameter prefix. postfix Character string character vector add string parameter postfix. sep Separator character passed collapse parameter paste(). pad Single padding character added digits string; defaults \"0\" width Minimum width padded strings. use_clean_names TRUE, prefix, postfix, string converted snake case janitor::make_clean_names(). case desired target case (default \"snake\") passed snakecase::to_any_case() exception \"old_janitor\", exists support legacy code (preserves behavior clean_names() prior addition \"case\" argument (janitor versions <= 0.3.1).  \"old_janitor\" intended new code. See to_any_case wide variety supported cases, including \"sentence\" \"title\" case. replace named character vector name replaced value. use_make_names make.names() applied ensure output usable name without quoting?  (Avoiding make.names() ensures output locale-independent quoting may required.) ... Additional parameters passed janitor::make_clean_names() use_clean_names TRUE. is_postfix TRUE, use prefix string postfix; defaults FALSE. date.format, time.format Date time format. used str_prefix prefix \"date\" \"time\" currently accessible using str_affix() make_filename().","code":""},{"path":"https://elipousson.github.io/filenamr/reference/str_affix.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Apply a prefix or postfix to a string — str_affix","text":"str_affix(): Add label, prefix, postfix string str_prefix(): Add prefix postfix string","code":""},{"path":"https://elipousson.github.io/filenamr/news/index.html","id":"filenamr-0109001-2023-03-20","dir":"Changelog","previous_headings":"","what":"filenamr 0.1.0.9001 (2023-03-20)","title":"filenamr 0.1.0.9001 (2023-03-20)","text":"Export check_path_fileext() function. Remove str_fileext functions (moved {isstatic} package)","code":""},{"path":"https://elipousson.github.io/filenamr/news/index.html","id":"filenamr-0109000-2023-03-15","dir":"Changelog","previous_headings":"","what":"filenamr 0.1.0.9000 (2023-03-15)","title":"filenamr 0.1.0.9000 (2023-03-15)","text":"Initial release.","code":""}]
